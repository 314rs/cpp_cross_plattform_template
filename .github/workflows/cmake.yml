# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake and CTest

on:
  push:
    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy: 
      matrix:
        os:
          - ubuntu-latest
          #- macos-latest
          - windows-latest
  
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      id: cache
      with:
        path: | 
          ~/.conan2/
        key: ${{ runner.os }}-conan-dependencies

    - uses: actions/setup-python@v5
      with:
        python-version: "3"
        cache: "pip"
              
    - name: conan
      run: | 
        pip install conan
        conan --version
        conan profile detect --force
        conan install conanfile.txt --build=missing

    - name: Build Ubuntu
      if: matrix.os == 'ubuntu-latest'
      # Build your program with the given configuration
      run: | 
        cmake --version
        cmake --preset conan-release
        cmake --build ${{github.workspace}}/build/${{env.BUILD_TYPE}}/ --config ${{env.BUILD_TYPE}}

    - name: Build Windows
      if: matrix.os == 'windows-latest'
      # Build your program with the given configuration
      run: |
        cmake --version
        cmake --preset conan-default
        cmake --build ${{github.workspace}}/build/ --config ${{env.BUILD_TYPE}}
        
    - uses: actions/upload-artifact@v4
      with:
        name: ${{github.event.repository.name}}-${{matrix.os}}-binaries
        path: |
          build/Release/
          !build/Release/*test*

    - name: Test
      working-directory: ${{github.workspace}}/build/${{env.BUILD_TYPE}}/
      run: ctest -C ${{env.BUILD_TYPE}} --output-junit test_results.xml

    - uses: test-summary/action@v2.4
      with:
        paths: "build/${{env.BUILD_TYPE}}/test_results.xml"
      if: always()

